package com.example.Bloodline_ADN_System.config;

import com.example.Bloodline_ADN_System.Entity.Blog;
import com.example.Bloodline_ADN_System.Entity.Service;
import com.example.Bloodline_ADN_System.Entity.User;
import com.example.Bloodline_ADN_System.repository.BlogRepository;
import com.example.Bloodline_ADN_System.repository.ServiceRepository;
import com.example.Bloodline_ADN_System.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;

@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ServiceRepository serviceRepository;

    @Autowired
    private BlogRepository blogRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        System.out.println("üîç DataInitializer ƒëang ch·∫°y...");
        System.out.println("üìä S·ªë l∆∞·ª£ng user hi·ªán t·∫°i: " + userRepository.count());
        System.out.println("üìä S·ªë l∆∞·ª£ng service hi·ªán t·∫°i: " + serviceRepository.count());
        System.out.println("üìä S·ªë l∆∞·ª£ng blog hi·ªán t·∫°i: " + blogRepository.count());
        
        // Ch·ªâ ch·∫°y n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
        if (userRepository.count() == 0) {
            System.out.println("üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...");
            initializeData();
        } else {
            System.out.println("‚úÖ Database ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua vi·ªác t·∫°o m·∫´u");
        }
    }

    public void initializeData() {
        // T·∫°o admin user
        User admin = new User();
        admin.setEmail("admin@bloodline.com");
        admin.setPassword(passwordEncoder.encode("admin123"));
        admin.setName("Admin");
        admin.setPhone("0123456789");
        admin.setAddress("H√† N·ªôi");
        admin.setRole(User.UserRole.ADMIN);
        admin.setStatus(User.Status.ACTIVE);
        admin.setCreateAt(LocalDate.now());
        admin.setBirthDate(LocalDate.of(1990, 1, 1));
        userRepository.save(admin);

        // T·∫°o customer user
        User customer = new User();
        customer.setEmail("customer@example.com");
        customer.setPassword(passwordEncoder.encode("customer123"));
        customer.setName("Nguy·ªÖn VƒÉn A");
        customer.setPhone("0987654321");
        customer.setAddress("TP.HCM");
        customer.setRole(User.UserRole.CUSTOMER);
        customer.setStatus(User.Status.ACTIVE);
        customer.setCreateAt(LocalDate.now());
        customer.setBirthDate(LocalDate.of(1995, 5, 15));
        userRepository.save(customer);

        // T·∫°o services
        Service service1 = new Service();
        service1.setServiceName("X√©t nghi·ªám ADN cha con");
        service1.setServiceDescription("X√©t nghi·ªám ADN ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá cha con v·ªõi ƒë·ªô ch√≠nh x√°c 99.9%");
        service1.setLimitPeople(100);
        service1.setServicePrice(2000000.0);
        service1.setImageUrl("https://example.com/dna-test.jpg");
        serviceRepository.save(service1);

        Service service2 = new Service();
        service2.setServiceName("X√©t nghi·ªám ADN m·∫π con");
        service2.setServiceDescription("X√©t nghi·ªám ADN ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá m·∫π con v·ªõi ƒë·ªô ch√≠nh x√°c cao");
        service2.setLimitPeople(80);
        service2.setServicePrice(1800000.0);
        service2.setImageUrl("https://example.com/mother-child-dna.jpg");
        serviceRepository.save(service2);

        Service service3 = new Service();
        service3.setServiceName("X√©t nghi·ªám ADN anh em");
        service3.setServiceDescription("X√©t nghi·ªám ADN ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá anh em ru·ªôt");
        service3.setLimitPeople(60);
        service3.setServicePrice(1500000.0);
        service3.setImageUrl("https://example.com/sibling-dna.jpg");
        serviceRepository.save(service3);

        // T·∫°o blogs
        Blog blog1 = new Blog();
        blog1.setAuthor(admin);
        blog1.setTitle("X√©t nghi·ªám ADN - Gi·∫£i ph√°p khoa h·ªçc cho vi·ªác x√°c ƒë·ªãnh quan h·ªá huy·∫øt th·ªëng");
        blog1.setContent("X√©t nghi·ªám ADN l√† ph∆∞∆°ng ph√°p khoa h·ªçc hi·ªán ƒë·∫°i nh·∫•t ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá huy·∫øt th·ªëng gi·ªØa c√°c c√° nh√¢n. V·ªõi ƒë·ªô ch√≠nh x√°c l√™n ƒë·∫øn 99.9%, ƒë√¢y l√† c√¥ng c·ª• kh√¥ng th·ªÉ thi·∫øu trong vi·ªác gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ v·ªÅ quan h·ªá gia ƒë√¨nh.");
        blog1.setImageUrl("https://example.com/blog1.jpg");
        blog1.setStatus(Blog.BlogStatus.PUBLISHED);
        blog1.setBlogType(Blog.BlogType.GUIDE);
        blog1.setCreatedAt(LocalDateTime.now());
        blog1.setPublishDate(LocalDateTime.now());
        blogRepository.save(blog1);

        Blog blog2 = new Blog();
        blog2.setAuthor(admin);
        blog2.setTitle("Quy tr√¨nh x√©t nghi·ªám ADN t·∫°i Bloodline ADN");
        blog2.setContent("T·∫°i Bloodline ADN, ch√∫ng t√¥i tu√¢n th·ªß quy tr√¨nh x√©t nghi·ªám ADN nghi√™m ng·∫∑t theo ti√™u chu·∫©n qu·ªëc t·∫ø. T·ª´ vi·ªác thu th·∫≠p m·∫´u ƒë·∫øn ph√¢n t√≠ch k·∫øt qu·∫£, m·ªçi b∆∞·ªõc ƒë·ªÅu ƒë∆∞·ª£c th·ª±c hi·ªán v·ªõi s·ª± c·∫©n th·∫≠n t·ªëi ƒëa.");
        blog2.setImageUrl("https://example.com/blog2.jpg");
        blog2.setStatus(Blog.BlogStatus.PUBLISHED);
        blog2.setBlogType(Blog.BlogType.GUIDE);
        blog2.setCreatedAt(LocalDateTime.now());
        blog2.setPublishDate(LocalDateTime.now());
        blogRepository.save(blog2);

        Blog blog3 = new Blog();
        blog3.setAuthor(admin);
        blog3.setTitle("Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt tr∆∞·ªõc khi l√†m x√©t nghi·ªám ADN");
        blog3.setContent("Tr∆∞·ªõc khi th·ª±c hi·ªán x√©t nghi·ªám ADN, b·∫°n c·∫ßn hi·ªÉu r√µ v·ªÅ quy tr√¨nh, th·ªùi gian ch·ªù k·∫øt qu·∫£, v√† c√°c y·∫øu t·ªë c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c c·ªßa k·∫øt qu·∫£.");
        blog3.setImageUrl("https://example.com/blog3.jpg");
        blog3.setStatus(Blog.BlogStatus.PUBLISHED);
        blog3.setBlogType(Blog.BlogType.NEWS);
        blog3.setCreatedAt(LocalDateTime.now());
        blog3.setPublishDate(LocalDateTime.now());
        blogRepository.save(blog3);

        System.out.println("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
    }
} 